pipeline {
    agent any
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    triggers ('once a day on the 1st and 15th of every month except December') {
        cron('H H 1,15 1-11 *') 
    }
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/spring-projects/spring-petclinic.git',
                branch: 'main'
            }
        }
        stage('Build') {
            steps {
                withSonarQubeEnv(credentialsId: 'SONARCLOUD_TOKEN',installationName: 'SONAR_CLOUD' )
                sh 'mvn clean package org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar -D sonar.organization=aug24 -Dsonar.projectKey=177530443246fbe3ff69a506d75ee36ae68286a2'
            }
            junit testResults: '**/surefire-reports/*.xml'
            archive '**/target/spring-petclinic-*.jar'
        }
        stage('Exec Maven commands') {
            steps {
                // Configure Maven project's repositories
                jf 'mvn-config --repo-resolve-releases qtlearning-libs-release --repo-resolve-snapshots qtlearning-libs-snapshot --repo-deploy-releases qtlearning-libs-release-local --repo-deploy-snapshots qtlearning-libs-snapshot-local'
                // Install and publish project
                jf 'mvn clean install'
            }
        }
        stage('Publish build info') {
            steps {
                jf 'rt build-publish'
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time:1 , unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
